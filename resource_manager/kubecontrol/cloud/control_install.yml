---
- hosts: cloudcontroller
  become: true
  tasks:
    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ cloud_ip }}
        create: true

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: true
        state: restarted

    - name: Forward IPv4 and let iptables see bridged traffic
      shell: |
        cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
        EOF

        sudo modprobe overlay
        sudo modprobe br_netfilter

        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        EOF

        sudo sysctl --system

    # - name: Create patches directory for Kubernetes
    #   command: mkdir /home/{{ username }}/patches

    # - name: Create kube-apiserver patch file
    #   shell: |
    #     cat > "/home/{{ username }}/patches/kube-apiserver.yaml" <<EOF
    #     spec:
    #       containers:
    #       - name: kube-apiserver
    #         resources:
    #           requests:
    #             cpu: 250m
    #             memory: 500Mi
    #           limits:
    #             cpu: 250m
    #             memory: 500Mi
    #     EOF

    # - name: Create kube-controller-manager patch file
    #   shell: |
    #     cat > "/home/{{ username }}/patches/kube-controller-manager.yaml" <<EOF
    #     spec:
    #       containers:
    #       - name: kube-controller-manager
    #         resources:
    #           requests:
    #             cpu: 100m
    #             memory: 200Mi
    #           limits:
    #             cpu: 100m
    #             memory: 200Mi
    #     EOF

    # - name: Create kube-scheduler patch file
    #   shell: |
    #     cat > "/home/{{ username }}/patches/kube-scheduler.yaml" <<EOF
    #     spec:
    #       containers:
    #       - name: kube-scheduler
    #         resources:
    #           requests:
    #             cpu: 100m
    #             memory: 200Mi
    #           limits:
    #             cpu: 100m
    #             memory: 200Mi
    #     EOF

    # - name: Create etcd patch file
    #   shell: |
    #     cat > "/home/{{ username }}/patches/etcd.yaml" <<EOF
    #     spec:
    #       containers:
    #       - name: etcd
    #         resources:
    #           requests:
    #             cpu: 200m
    #             memory: 400Mi
    #           limits:
    #             cpu: 200m
    #             memory: 400Mi
    #     EOF

    - name: Create kubelet config file
      shell: |
        cat > "/home/{{ username }}/config.yaml" <<EOF
        apiVersion: kubeadm.k8s.io/v1beta3
        kind: InitConfiguration
        localAPIEndpoint:
          advertiseAddress: {{ cloud_ip }}
        ---
        apiVersion: kubeadm.k8s.io/v1beta3
        kind: ClusterConfiguration
        apiServer:
          certSANs:
          - {{ cloud_ip }}
        imageRepository: {{ registry_ip }}
        kubernetesVersion: {{ kubeversion }}
        networking:
          podSubnet: 10.244.0.0/16
        ---
        apiVersion: kubelet.config.k8s.io/v1beta1
        kind: KubeletConfiguration
        containerLogMaxSize: "100Mi"
        containerLogMaxFiles: 10
        EOF
    # ---- From InitConfiguration
    # patches:
    #   directory: /home/{{ username }}/patches/
    #
    # ---- From ClusterConfiguration
    # controllerManager:
    #   extraArgs:
    #     kube-api-qps: "100000"
    #     kube-api-burst: "100000"
    # scheduler:
    #   extraArgs:
    #     kube-api-qps: "100000"
    #     kube-api-burst: "100000"
    #
    # ---- From KubeletConfiguration
    # maxPods: 265
    # eventRecordQPS: 0
    # kubeAPIQPS: 0
    # serializeImagePulls: false
    # maxParallelImagePulls: 10000
    # registryPullQPS: 0
    # featureGates:
    #   EventedPLEG: true

    - name: Initialize the Kubernetes cluster using kubeadm
      command: >
        kubeadm init
          --node-name {{ ansible_hostname }}
          --ignore-preflight-errors all
          --config /home/{{ username }}/config.yaml

    - name: Create user Kubernetes directory
      file:
        path: /home/{{ username }}/.kube
        state: directory

    - name: Copy Kubernetes files to user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ username }}/.kube/config
        owner: "{{ username }}"
        group: "{{ username }}"
        remote_src: true

    - name: Set KUBECONFIG variable globally
      shell: echo "export KUBECONFIG=/home/{{ username }}/.kube/config" >> /etc/environment

    - name: Enable networking with Calico, only for cloud mode
      shell: |
        if [ "{{ cloud_mode }}" -gt "0" ]; then
          kubectl create -f /kube-flannel.yml
        fi

    - name: Create join command for worker nodes (cloud-only)
      shell: |
        echo '#!/bin/bash' > /tmp/join-command.txt
        kubeadm token create --print-join-command >> /tmp/join-command.txt

    - name: Copy join command to local file
      fetch:
        src: /tmp/join-command.txt
        dest: "{{ continuum_home }}/"
        flat: true

    - name: Remove unneeded Kubernetes join command file
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/join-command.txt

    - name: Create k8s kata-fc RuntimeClass
      shell: |
        cat > "/home/{{ username }}/kata-fc-rc.yaml" <<EOF
        apiVersion: node.k8s.io/v1
        kind: RuntimeClass
        metadata:
          name: kata-fc
        handler: kata-fc
        EOF

    - name: Apply kata-fc RuntimeClass
      command: >
        kubectl apply -f "/home/{{ username }}/kata-fc-rc.yaml"

    - name: Create k8s kata RuntimeClass
      shell: |
        cat > "/home/{{ username }}/kata-rc.yaml" <<EOF
        apiVersion: node.k8s.io/v1
        kind: RuntimeClass
        metadata:
          name: kata
        handler: kata
        EOF

    - name: Apply kata RuntimeClass
      command: >
        kubectl apply -f "/home/{{ username }}/kata-rc.yaml"

    - name: Create k8s runc RuntimeClass
      shell: |
        cat > "/home/{{ username }}/runc-rc.yaml" <<EOF
        apiVersion: node.k8s.io/v1
        kind: RuntimeClass
        metadata:
          name: runc
        handler: runc
        EOF

    - name: Apply runc RuntimeClass
      command: >
        kubectl apply -f "/home/{{ username }}/runc-rc.yaml"

    - name: Create dev tools file
      shell: |
        cat > "/home/{{ username }}/install_dev_tools.py" <<EOF
        import subprocess
        import os
        subprocess.run("sudo apt install zsh neovim tree -y", shell=True)
        subprocess.run("mkdir -p ~/.config/nvim/pack/tpope/start", shell=True)
        subprocess.run("git clone https://github.com/tpope/vim-surround.git ~/.config/nvim/pack/tpope/start/vim-surround", shell=True)
        subprocess.run("git clone https://github.com/tpope/vim-commentary.git ~/.config/nvim/pack/tpope/start/vim-commentary", shell=True)
        subprocess.run("git clone https://github.com/tpope/vim-unimpaired.git ~/.config/nvim/pack/tpope/start/vim-unimpaired", shell=True)
        subprocess.run("git clone https://github.com/tpope/vim-repeat.git ~/.config/nvim/pack/tpope/start/vim-repeat", shell=True)
        subprocess.run("git clone https://github.com/tpope/vim-eunuch.git ~/.config/nvim/pack/tpope/start/vim-eunuch", shell=True)
        f_path = os.path.expanduser('.config/nvim/init.vim')
        with open(f_path, "w") as f:
            f.write("""
        set number t_Co=256 scrolloff=7 ts=4 sts=4 sw=4 expandtab nowrap ignorecase smartcase
        filetype on
        syntax enable
        autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
        let mapleader = ","
        noremap \ ,
        nnoremap <Leader>w :w!<CR>
        nnoremap <Leader>q :q<CR>
        nmap <C-j> <C-W>j
        nmap <C-k> <C-W>k
        nmap <C-h> <C-W>h
        nmap <C-l> <C-W>l
        nnoremap <silent> <esc> :silent noh<CR>
        command! W execute 'w !sudo tee % > /dev/null' <bar> edit!
        augroup highlight_yank
            autocmd!
            au TextYankPost * silent! lua vim.highlight.on_yank { higroup='IncSearch', timeout=250 }
        augroup END
        tnoremap <ESC> <C-\><C-n>
        tnoremap <C-v><ESC> <ESC>
        """)
        subprocess.run('wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh', shell=True)
        subprocess.run('chmod +x install.sh', shell=True)
        EOF

        cat > "/home/{{ username }}/.bash_history" <<EOF
        python3.8 install_dev_tools.py
        ./install.sh
        EOF

    - name: create extra dev files
      shell: |
        cat > "/home/{{ username }}/configure_zsh.sh" <<EOF
        #!/bin/bash
        sed -i 's/plugins=(git)/plugins=(git sudo)/' ~/.zshrc
        sed -i 's/ZSH_THEME="robbyrussell"/ZSH_THEME="pmcgee"/' ~/.zshrc
        EOF
        chmod +x "/home/{{ username }}/configure_zsh.sh"
